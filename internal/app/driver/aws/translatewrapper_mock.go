// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/app/driver/aws/translatewrapper.go

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	translate "github.com/aws/aws-sdk-go/service/translate"
	gomock "github.com/golang/mock/gomock"
)

// MockTranslateWrapper is a mock of TranslateWrapper interface
type MockTranslateWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateWrapperMockRecorder
}

// MockTranslateWrapperMockRecorder is the mock recorder for MockTranslateWrapper
type MockTranslateWrapperMockRecorder struct {
	mock *MockTranslateWrapper
}

// NewMockTranslateWrapper creates a new mock instance
func NewMockTranslateWrapper(ctrl *gomock.Controller) *MockTranslateWrapper {
	mock := &MockTranslateWrapper{ctrl: ctrl}
	mock.recorder = &MockTranslateWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranslateWrapper) EXPECT() *MockTranslateWrapperMockRecorder {
	return m.recorder
}

// TextWithContext mocks base method
func (m *MockTranslateWrapper) TextWithContext(ctx aws.Context, input *translate.TextInput, opts ...request.Option) (*translate.TextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TextWithContext", varargs...)
	ret0, _ := ret[0].(*translate.TextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextWithContext indicates an expected call of TextWithContext
func (mr *MockTranslateWrapperMockRecorder) TextWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextWithContext", reflect.TypeOf((*MockTranslateWrapper)(nil).TextWithContext), varargs...)
}
