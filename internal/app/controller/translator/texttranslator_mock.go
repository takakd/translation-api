// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/app/controller/translator/texttranslator.go

// Package translator is a generated GoMock package.
package translator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTextTranslator is a mock of TextTranslator interface
type MockTextTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTextTranslatorMockRecorder
}

// MockTextTranslatorMockRecorder is the mock recorder for MockTextTranslator
type MockTextTranslatorMockRecorder struct {
	mock *MockTextTranslator
}

// NewMockTextTranslator creates a new mock instance
func NewMockTextTranslator(ctrl *gomock.Controller) *MockTextTranslator {
	mock := &MockTextTranslator{ctrl: ctrl}
	mock.recorder = &MockTextTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTextTranslator) EXPECT() *MockTextTranslatorMockRecorder {
	return m.recorder
}

// Translate mocks base method
func (m *MockTextTranslator) Translate(ctx context.Context, text string, srcLang, targetLang LanguageType) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, text, srcLang, targetLang)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate
func (mr *MockTextTranslatorMockRecorder) Translate(ctx, text, srcLang, targetLang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockTextTranslator)(nil).Translate), ctx, text, srcLang, targetLang)
}
